/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ItemApplication;
import com.Item;
import javax.persistence.EntityManagerFactory;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.Persistence;
import javax.persistence.Query;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
public class Library {
   
    EntityManager entityManager;
    
        public Library()
        {
        	EntityManagerFactory factory=Persistence.createEntityManagerFactory("ItemPU");
     	  entityManager=factory.createEntityManager();

        }
    
    public void saveItem(Item item)
    {
    
    	       	   entityManager.getTransaction().begin();
    	   entityManager.persist(item);
           entityManager.flush();
           entityManager.getTransaction().commit();
           
    }
    
    public Item findItem(int id)
    {
    	Item item=entityManager.find(Item.class,id);
    	
    	return item;
    }
    

    public boolean updateItem(Item item,int id)
    {
    	
    	Item item_to_be_updated=findItem(id);
    	
    	item_to_be_updated.setItemName(item.getItemName());
    	item_to_be_updated.setPrice(item.getPrice());
    	entityManager.getTransaction().begin();
    	entityManager.merge(item_to_be_updated);
    	entityManager.flush();
    	entityManager.getTransaction().commit();
    	
    	return true;
    }
    
    public boolean removeItem(int id)
    {
    	Item item=findItem(id);
    	entityManager.getTransaction().begin();
    	entityManager.remove(item);
    	entityManager.flush();
    	entityManager.getTransaction().commit();
    	return true;
    }
    
   
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    public void jpqldemo()
    {
      
    	 String query="Select i from Item i";
    	
       Query entityQuery=entityManager.createQuery(query);	
    	
    List<Item> itemlist=entityQuery.getResultList();
    
    for(Item itemobj:itemlist)
    {
    	System.out.println(itemobj.getItemName());
    	System.out.println(itemobj.getPrice());
    }
    	
    	
    	
    	
    	
    }
    
    
   
    
    public void namedparameterdemo(float price)
    {
    	
    	String query="select i from Item i where i.price > :itemprice";
    	Query paramquery=entityManager.createQuery(query);
    	paramquery.setParameter("itemprice", price);
    	
    	List<Item> itemlist=paramquery.getResultList();
    	
    	for(Item itemobj:itemlist)
        {
        	System.out.println(itemobj.getItemName());
        	System.out.println(itemobj.getPrice());
        }
        	
        	
    	
    	
    }
    
    
    
    
    public void jpCriteriaQueryDemo()
    {
    	    	
    	CriteriaBuilder cb=entityManager.getCriteriaBuilder();
    	CriteriaQuery<Item> cr=cb.createQuery(Item.class);
    	Root<Item> root=cr.from(Item.class);
    	Predicate predicate=cb.gt(root.get("price"), 30);
    	cr.where(predicate);
    	
    	Query query=entityManager.createQuery(cr);
    	List<Item> results=query.getResultList();
    	for(Item itemObj:results)
    	{
    		System.out.println(itemObj.getItemName());
    		System.out.println(itemObj.getPrice());
    	}
    	
    	
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    public static void main(String args[])
    { 
    	Library library=new Library();
    	library.saveItem(new Item("Coffee",20));
    	library.saveItem(new Item("Tea",30));
    	library.saveItem(new Item("IceCream",50));
    	library.saveItem(new Item("Soft Dring",30));
    	library.saveItem(new Item("Jam",35));
    	library.jpCriteriaQueryDemo();
    	
    	
    	
    }
}
